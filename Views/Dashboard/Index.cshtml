@model IEnumerable<IGrouping<Guid?, ActualSensorValue>>
@{
    ViewBag.Title = "Измерения по системе";

    var hasError = Model.Any(p => p.Any(t => t.IsError));
    var hasWarning = Model.Any(p => p.Any(t => t.IsWarning));

    var listenSensors = Model.SelectMany(p => p.SelectMany(t =>
    {
        if (!t.TankGuid.HasValue)
        {
            return new[]
            {
                new
                {
                    guid = t.SensorGuid,
                    updateDate = t.MainSensorLastDate
                }
            };
        }
        else
        {
            if (t.DualMode == true)
            {
                return new[]
                {
                    new
                    {
                        guid = t.MainSensorGuid,
                        updateDate = t.MainSensorLastDate
                    },
                    new
                    {
                        guid = t.SecondSensorGuid,
                        updateDate = t.SecondSensorLastDate
                    }
                };
            }
            else
            {
                return new[]
                {
                    new
                    {
                        guid = t.MainSensorGuid,
                        updateDate = t.MainSensorLastDate
                    }
                };
            }
        }
    })).Where(p => p.guid != null);
}

@if (hasError)
{
    <div class="callout callout-danger">
        <h4>Внимание!</h4>
        <p>Данные с некоторых датчиков никогда не поступали. Проверьте правильность настроек.</p>
    </div>
}
@if (hasWarning)
{
    <div class="callout callout-warning">
        <h4>Внимание!</h4>
        <p>Данные с некоторых датчиков не поступают больше часа. Проверьте правильность настроек и исправность системы.</p>
    </div>
}
@foreach (var point in Model)
{
    var pointHeader = point.First();
    var pointName = pointHeader.PointGuid.HasValue ? pointHeader.PointName : "Датчики без привязки к объекту и топливному баку";

    <h3>@pointName</h3>
    <div class="row">
        @foreach (var tank in point.OrderBy(t => t.TankName))
        {
            @Html.Partial("SensorCard", tank)
        }
    </div>
}

<script src="/npm/@@microsoft/signalr/dist/browser/signalr.min.js"></script>
<script>
    const sensor = @Html.Raw(JsonSerializer.Serialize(listenSensors));
    const connection = new signalR.HubConnectionBuilder().withUrl('/broadcast').build();

    /*
    connection.on('sensorupdate', function (data, date) {
        data.forEach(function (item) {
            if (actualValues[item.sensorGuid] == item.sensorValueId) {
                container.find('tr[data-sensorguid="' + item.sensorGuid + '"]:first').next().find('td:first').html(date);
            } else {
                actualValues[item.sensorGuid] = item.sensorValueId;

                var html = '<tr data-sensorguid="' + item.sensorGuid + '"><td>' +
                    date + '</td><td>' +
                    item.date + '</td><td>' +
                    item.eventDate + '</td><td>' +
                    item.value + '</td></tr>';

                container.find('tr[data-sensorguid="' + item.sensorGuid + '"]:first').after(html);

                var rowCount = container.find('tr[data-sensorguid="' + item.sensorGuid + '"]').length;
                if (rowCount == 5) {
                    container.find('tr[data-sensorguid="' + item.sensorGuid + '"]:last').remove();
                }
            }
        });
    });

    connection.start();*/
</script>
