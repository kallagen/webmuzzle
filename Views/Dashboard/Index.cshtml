@model IEnumerable<IGrouping<Guid?, ActualSensorValue>>
@{
    ViewBag.Title = "Измерения по системе";

    var hasError = Model.Any(p => p.Any(t => t.IsError));
    var hasWarning = Model.Any(p => p.Any(t => t.IsWarning));

    var listenSensors = Model.SelectMany(p => p.SelectMany(t =>
    {
        if (!t.TankGuid.HasValue)
        {
            return new[]
            {
                new
                {
                    guid = t.SensorGuid,
                    updateDate = t.MainSensorLastDate,
                    isSecond = -1
                }
            };
        }
        else
        {
            if (t.DualMode == true)
            {
                return new[]
                {
                    new
                    {
                        guid = t.MainSensorGuid,
                        updateDate = t.MainSensorLastDate,
                        isSecond = 0
                    },
                    new
                    {
                        guid = t.SecondSensorGuid,
                        updateDate = t.SecondSensorLastDate,
                        isSecond = 1
                    }
                };
            }
            else
            {
                return new[]
                {
                    new
                    {
                        guid = t.MainSensorGuid,
                        updateDate = t.MainSensorLastDate,
                        isSecond = -1
                    }
                };
            }
        }
    })).Where(p => p.guid != null).ToDictionary(p => p.guid, p => p);
}

<div class="t-error-message callout callout-danger @if(!hasError){<text>hidden</text>}">
    <h4>Внимание!</h4>
    <p>Данные с некоторых датчиков никогда не поступали. Проверьте правильность настроек.</p>
</div>
<div class="t-warning-message callout callout-warning @if(!hasWarning){<text>hidden</text>}">
    <h4>Внимание!</h4>
    <p>Данные с некоторых датчиков не поступают больше часа. Проверьте правильность настроек и исправность системы.</p>
</div>

@foreach (var point in Model)
{
    var pointHeader = point.First();
    var pointName = pointHeader.PointGuid.HasValue ? pointHeader.PointName : "Датчики без привязки к объекту и топливному баку";

    <h3>@pointName</h3>
    <div class="row">
        @foreach (var tank in point.OrderBy(t => t.TankName))
        {
            @Html.Partial("SensorCard", tank)
        }
    </div>
}

<script src="/npm/@@microsoft/signalr/dist/browser/signalr.min.js"></script>
<script>
    const listenSensors = @Html.Raw(JsonSerializer.Serialize(listenSensors));
    const connection = new signalR.HubConnectionBuilder().withUrl('/broadcast').build();

    var errorBlock = $('.t-error-message');
    var warningBlock = $('.t-warning-message');

    connection.on('sensorupdate', function (data, date)
    {
        for (sensorGuid in listenSensors) {
            if (data && data[sensorGuid] && data[sensorGuid].insertDate != listenSensors[sensorGuid].updateDate) {

                var val = data[sensorGuid];
                var container = $('.t-cell[data-sensorguid="' + sensorGuid + '"],.t-cell[data-secondsensorguid="' + sensorGuid + '"]');

                var point = container.find('i[data-sensorguid="' + sensorGuid + '"]');
                if (point.hasClass('text-red')) {
                    point.removeClass('text-red');
                }
                if (point.hasClass('text-yellow')) {
                    point.removeClass('text-yellow');
                }

                if (container.hasClass('t-error') && !container.find('.text-red').length) {
                    container.removeClass('t-error');
                }
                if (container.hasClass('t-warning') && !container.find('.text-yellow').length) {
                    container.removeClass('t-warning');
                }

                if (!errorBlock.hasClass('hidden') && !$('.text-red').length) {
                    errorBlock.addClass('hidden');
                }
                if (!warningBlock.hasClass('hidden') && !$('.text-yellow').length) {
                    warningBlock.addClass('hidden');
                }

                container.find('span[data-sensorguid="' + sensorGuid + '"]').html(val.insertDateStr);

                if (listenSensors[sensorGuid].isSecond == 0 || listenSensors[sensorGuid].isSecond == -1) {
                    container.find('.t-liquidEnvironmentLevel').html(val.liquidEnvironmentLevel);
                    container.find('.t-environmentVolume').html(val.environmentVolume);
                    container.find('.t-liquidDensity').html(val.liquidDensity);
                    container.find('.t-avgT').html(val.avgT);
                    container.find('.t-environmentLevel').html(val.environmentLevel);
                }

                if (listenSensors[sensorGuid].isSecond == 1 || listenSensors[sensorGuid].isSecond == -1) {
                    container.find('.t-t1').html(val.t1.toFixed(1).replace('.', ','));
                    container.find('.t-t2').html(val.t2.toFixed(1).replace('.', ','));
                    container.find('.t-t3').html(val.t3.toFixed(1).replace('.', ','));
                    container.find('.t-t4').html(val.t4.toFixed(1).replace('.', ','));
                    container.find('.t-t5').html(val.t5.toFixed(1).replace('.', ','));
                    container.find('.t-t6').html(val.t6.toFixed(1).replace('.', ','));
                    container.find('.t-avgT').html(val.avgT.toFixed(1).replace('.', ','));
                }                

                listenSensors[sensorGuid].updateDate = data[sensorGuid].insertDate;
            }
        }
    });

    connection.start();
</script>
