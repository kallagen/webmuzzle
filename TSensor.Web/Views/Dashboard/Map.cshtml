@using TSensor.Web.Models.Services
@model MapViewModel
@{
    ViewBag.Title = "Карта объектов";

    var comparer = new AlphanumComparer();

    var featureJson = JsonSerializer.Serialize(
        new
        {
            options = new
            {
                defaultLon = Model.DefaultLon,
                defaultLat = Model.DefaultLat
            },
            features = Model?.Features?
                .Where(p => p.Longitude.HasValue && p.Latitude.HasValue)
                .Select(p => new
                {
                    name = p.Name,
                    lon = p.Longitude,
                    lat = p.Latitude,
                    url = Url.Action("PointDetails", "Dashboard", new { guid = p.PointGuid }),
                    guid = p.PointGuid,
                    tankList = p.TankList.Select(t => new
                    {
                        name = string.Join(" ", new[] { t.Name, t.ProductName }),
                        url = Url.Action("Details", "Tank", new { guid = t.TankGuid })
                    }).OrderBy(t => t.name, comparer)
                })
        });

    var mapSettings = JsonSerializer.Serialize(Model.Settings);
}

<link rel="stylesheet" href="~/css/map.css" />
<div id="ol-map" class="ol-map"></div>
<div id="ol-popup" class="ol-popup">
    <div id="ol-popup-header" class="ol-popup-header"></div>
    <div id="ol-popup-content" class="ol-popup-content"></div>
</div>

<link rel="stylesheet" href="~/lib/ol/css/ol.css" />
<script src="~/lib/signalr/signalr.min.js"></script>
<script src="~/lib/ol/build/ol.js"></script>
<script src="~/js/map.js"></script>
<script>
    var map = new Map(@Html.Raw(mapSettings));
    map.init(@Html.Raw(featureJson));

    const connection = new signalR.HubConnectionBuilder().withUrl('/broadcast/coordinates').build();
    connection.on('coordinatesupdate', map.coordinatesUpdate);
    connection.start();
</script>