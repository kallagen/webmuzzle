@model ChartViewModel
@{
    ViewBag.Title = "Графики";

    var baseRequestData = JsonSerializer.Serialize(new
    {
        Model.DateStart,
        Model.DateEnd,
        Model.MainParam,
        Model.AdditionalParam,
        Model.TankGuidList
    });
}

@section TitleButtons
{
    <div class="title-button-container">
        <button id="chart-unzoom" class="btn btn-default fixed-button-width pull-right hidden" style="margin-left: 14px;">Сбросить масштаб</button>
        <button id="chart-refresh" class="btn bg-blue fixed-button-width pull-right">Обновить график</button>
    </div>
}

@section AdditionalHeader
{
    @using (Html.BeginForm("Index", "Dashboard", FormMethod.Post, new { id = "back-form", @class = "title-button-container", autocomplete = "off" }))
    {
        foreach (var tankGuid in Model.TankGuidList)
        {
            @Html.Hidden("guidList[]", tankGuid, new { id = $"guidList{tankGuid}" })
        }
    }
    <a id="back-link" href="javascript:void(0)" class="footer-link pull-right additional-header-link">назад к объектам</a>
}

<script src="~/lib/chartjs/Chart.bundle.js"></script>
<script src="~/lib/chartjs.plugin.crosshair/chartjs-plugin-crosshair@1.1.2.js"></script>

@if (Model.IsError)
{
    <div class="t-warning-message callout callout-warning">
        <h4>Внимание!</h4>
        <p>@Model.ErrorMessage</p>
    </div>
}

@using (Html.BeginForm("Index", "Chart", FormMethod.Post, new { autocomplete = "off", id = "chart-form" }))
{
    foreach (var tankGuid in Model.TankGuidList)
    {
        @Html.Hidden("TankGuidList[]", tankGuid, new { id = $"tankGuidList{tankGuid}" })
    }
    <div class="box box-solid">
        <div class="box-body table-responsive">
            <div class="col-md-3">
                <div class="form-group">
                    <label for="DateStart">Дата с</label>
                    @Html.TextBoxFor(m => m.DateStart, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="DateEnd">Дата по</label>
                    @Html.TextBoxFor(m => m.DateEnd, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="MainParam">Основной параметр</label>
                    @Html.DropDownListFor(m => m.MainParam, new SelectList(ChartViewModel.ParamList, "Key", "Value"), new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="AdditionalParam">Дополнительный параметр</label>
                    @Html.DropDownListFor(m => m.AdditionalParam, new SelectList(ChartViewModel.ParamList, "Key", "Value"), string.Empty, new { @class = "form-control" })
                </div>
            </div>
        </div>
    </div>
}

@if (Model.Values?.Any() != true)
{
    <p>За указанный период нет данных</p>
}
else
{
    <div class="box box-solid">
        <canvas id="chart">
        </canvas>
        <div class="overlay hidden">
            <i class="fa fa-refresh fa-spin"></i>
        </div>
    </div>

    <script>
        var baseRequestData = @Html.Raw(@baseRequestData);

        var $loader = $('.overlay');
        function loadStart() { $loader.removeClass('hidden'); }
        function loadEnd() { $loader.addClass('hidden') }

        var errorModal = new ErrorModal('При обновлении графика произошла ошибка');

        var $unzoomButton = $('#chart-unzoom');
        $unzoomButton.click(function () {
            reloadChart();
        });

        function reloadChart() {
            loadStart();

            $.ajax({
                url: '@Url.Action("Data", "Chart")',
                type: 'POST',
                data: baseRequestData,
                success: function (data) {
                    chart.data = data;
                    chart.update();

                    loadEnd();

                    $unzoomButton.addClass('hidden');
                },
                error: function () {
                    errorModal.show();
                    loadEnd();
                },
                timeout: 30000
            });
        }

        var chart = new Chart(document.getElementById('chart').getContext('2d'), {
            type: 'line',
            data:
            {
                datasets: @Html.Raw(JsonSerializer.Serialize(Model.Values))
            },
            options: {
            title: {
                display: false
            },
            scales: {
                xAxes: [{
                    type: 'time',
                    time: {
                        displayFormats: {
                            millisecond: 'HH:mm:ss',
                            second: 'HH:mm:ss',
                            minute: 'HH:mm',
                            hour: 'DD.MM HH:mm',
                            day: 'DD.MM HH:mm',
                            week: 'DD.MM HH:mm',
                            month: 'DD.MM HH:mm',
                            quarter: 'DD.MM HH:mm',
                            year: 'DD.MM HH:mm'
                        },
                        tooltipFormat: 'DD.MM HH:mm:ss'
                    }
                }],
                yAxes: [{
                    type: 'linear',
					display: true,
					position: 'left',
                    id: 'y-axis-main',
                    ticks: {
                        beginAtZero: false
                    }
                }

                @if (Model.AdditionalParam != null)
                {
                    <text>
                    ,{
					    type: 'linear',
					    display: true,
						position: 'right',
                        id: 'y-axis-additional',
                        ticks: {
                            beginAtZero: false
                        }
                    }
                    </text>
                }

                ]
                },
                plugins: {
                    crosshair: {
                        callbacks: {
                            beforeZoom: function (start, end) {
                                if (end - start < 600000) {
                                    return false;
                                }

                                loadStart();

                                var postData = {
                                    DateStart: start.toISOString(),
                                    DateEnd: end.toISOString(),
                                    MainParam: baseRequestData.MainParam,
                                    AdditionalParam: baseRequestData.AdditionalParam,
                                    TankGuidList: baseRequestData.TankGuidList
                                };

                                $.ajax({
                                    url: '@Url.Action("Data", "Chart")',
                                    type: 'POST',
                                    data: postData,
                                    success: function (data) {
                                        chart.data = data;
                                        chart.update();

                                        loadEnd();

                                        $unzoomButton.removeClass('hidden');
                                    },
                                    error: function () {
                                        errorModal.show();
                                        loadEnd();
                                    },
                                    timeout: 30000
                                });

                                return false;
                            }
                        }
                    }
                }
        }
        });
    </script>
}

<script>
    new DatePicker('DateStart', {
        allowTime: true
    });
    new DatePicker('DateEnd', {
        allowTime: true
    });

    $('#chart-refresh').click(function (e) {
        $('#chart-form').submit();
    });
    $('#back-link').click(function () {
        $('#back-form').submit();
    });
</script>
