@model TankDetailsViewModel
@{
    ViewBag.Title = $"{Model.PointName} {Model.TankName} {Model.ProductName}".Trim();

    var exportDateStart = DateTime.Now.AddDays(-1);
    var exportDateEnd = DateTime.Now;

    var listenSensors = new[] { Model.Value }
        .Where(p => p != null)
        .Select(p => new { guid = p.SensorGuid, updateDate = p.InsertDate });

    var sensorGuid = Model.Value?.SensorGuid;

    void ValueRow(string sysname, string label, object value)
    {
        <tr>
            <td>@label</td>
            <td class="@sysname" data-sensorGuid="@sensorGuid">@value?.ToString()?.Replace(",", ".")</td>
        </tr>
    }
}

<div class="row">
    <div class="col-md-3">
        @using (Html.BeginForm("Export", "Tank", FormMethod.Post, new { autocomplete = "off", @class = "user-search-form" }))
        {
            @Html.Hidden("tankGuid", Model.TankGuid)
            <div class="box box-solid">
                <div class="box-header">
                    <h4>Экспорт данных с датчиков</h4>
                </div>
                <div class="box-body">
                    <div class="form-group">
                        <label for="ExportDateStart">Дата с</label>
                        @Html.TextBox("exportDateStart", exportDateStart, new { @class = "form-control" })
                    </div>
                    <div class="form-group">
                        <label for="ExportDateEnd">Дата по</label>
                        @Html.TextBox("exportDateEnd", exportDateEnd, new { @class = "form-control" })
                    </div>
                </div>
                <div class="box-footer">
                    <button type="submit" class="btn bg-blue">Выгрузить значения</button>
                </div>
            </div>
        }

        @if (Model.HasCalibrationRights && !Model.IsMassmeter)
        {
            using (Html.BeginForm("UploadCalibrationData", "Tank", FormMethod.Post, new { enctype = "multipart/form-data", autocomplete = "off", id = "upload-form", @class = "user-search-form" }))
            {
                var uploadDataLabel = Model.HasCalibrationData ? "Обновить" : "Загрузить";
                @Html.Hidden("tankGuid", Model.TankGuid)
                <div class="box box-solid">
                    <div class="box-header">
                        <h4>Калибровочная характеристика</h4>
                    </div>
                    <div class="box-footer">
                        <button id="upload-button" type="button" class="btn bg-blue">@uploadDataLabel</button>
                        @if (Model.HasCalibrationData)
                        {
                            @Html.ActionLink("Просмотреть", "CalibrationData", "Tank", new { tankGuid = Model.TankGuid }, new { @class = "btn btn-default pull-right" })
                        }
                        <input id="upload-input" class="hidden" type="file" name="file" />                        
                    </div>
                </div>
            }
            <script>
                var uploadInput = document.querySelector('#upload-input');
                uploadInput.addEventListener('change', function () {
                    document.querySelector('#upload-form').submit();
                });
                document.querySelector('#upload-button').addEventListener('click', function () {
                    uploadInput.click();
                });
            </script>
        }

        @if (Model.HasCalibrationRights && !Model.IsMassmeter && Model.MassmeterList.Any())
        {
            using (Html.BeginForm("Calibrate", "Tank", FormMethod.Post, new { autocomplete = "off", @class = "user-search-form" }))
            {
                @Html.Hidden("tankGuid", Model.TankGuid)
                <div class="box box-solid">
                    <div class="box-header">
                        <h4>Создать калибровочную характеристику</h4>
                    </div>
                    <div class="box-body">
                        <div class="form-group">
                            <label for="massmeterGuid">Массомер</label>
                            @Html.DropDownList("massmeterGuid", new SelectList(Model.MassmeterList, "Key", "Value"), new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="box-footer">
                        <button type="submit" class="btn bg-blue">Создать</button>
                    </div>
                </div>
            }
        }
    </div>
    <div class="col-md-9">
        <div class="box box-solid">
            <div class="box-body table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Название параметра</th>
                            <th>Значение датчика</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.IsMassmeter)
                        {
                            ValueRow("izkNumber", "Адрес ИЗК", Model.Value?.izkNumber);
                            ValueRow("sensorSerial", "Адрес датчика", Model.Value?.sensorSerial);
                            ValueRow("environmentVolume", "Объем, л", Model.Value?.environmentVolume);
                            ValueRow("liquidEnvironmentLevel", "Общий счетчик массы, кг", Model.Value?.liquidEnvironmentLevel);
                            ValueRow("steamMass", "Текущий счетчик массы, кг", Model.Value?.steamMass);
                            ValueRow("liquidDensity", "Текущая плотность, кг/м³", Model.Value?.liquidDensity);
                            ValueRow("t1", "Температура массомера, °C", Model.Value?.t1);
                            ValueRow("environmentComposition", "Положение задвижки, %", Model.Value?.environmentComposition);
                        }
                        else
                        {
                            ValueRow("izkNumber", "Адрес ИЗК", Model.Value?.izkNumber);
                            ValueRow("banderolType", "Тип посылки", Model.Value?.banderolType);
                            ValueRow("sensorSerial", "Адрес датчика", Model.Value?.sensorSerial);
                            ValueRow("sensorChannel", "Номер канала", Model.Value?.sensorChannel);
                            ValueRow("sensorFirmwareVersionAndReserv", "версия ПО датчика", Model.Value?.sensorFirmwareVersionAndReserv);
                            ValueRow("alarma", "Бит сигнализации", Model.Value?.alarma);
                            ValueRow("environmentLevel", "Уровень, мм", Model.Value?.environmentLevel);
                            if (Model.DualMode)
                            {
                                ValueRow("pressureFilter", "Сигнальный уровень, атм", Model.Value?.pressureFilter);
                            }
                            ValueRow("pressureMeasuring", "Давление измер, атм", Model.Value?.pressureMeasuring);
                            ValueRow("levelInPercent", "Объем, %", Model.Value?.levelInPercent);
                            ValueRow("environmentVolume", "Объем, м³", Model.Value?.environmentVolume);
                            ValueRow("liquidEnvironmentLevel", "Масса жидкости, т", Model.Value?.liquidEnvironmentLevel);
                            ValueRow("steamMass", "Масса пара, т", Model.Value?.steamMass);
                            ValueRow("liquidDensity", "Плотность жидкости, кг/м³", Model.Value?.liquidDensity);
                            ValueRow("steamDensity", "Плотность пара, кг/м³", Model.Value?.steamDensity);
                            ValueRow("dielectricPermeability", "Диэлектрическая проницаемость жидкости", Model.Value?.dielectricPermeability);
                            ValueRow("dielectricPermeability2", "Диэлектрическая проницаемость пара", Model.Value?.dielectricPermeability2);
                            ValueRow("t1", "Температура нижнего датчика?, °C", Model.Value?.t1);
                            ValueRow("t2", "Температура, °C", Model.Value?.t2);
                            ValueRow("t3", "Температура, °C", Model.Value?.t3);
                            ValueRow("t4", "Температура, °C", Model.Value?.t4);
                            ValueRow("t5", "Температура, °C", Model.Value?.t5);
                            ValueRow("t6", "Температура верхнего датчика?, °C", Model.Value?.t6);
                            ValueRow("plateTemp", "Температура платы, °C", Model.Value?.plateTemp);
                            ValueRow("period", "Период платы", Model.Value?.period);
                            ValueRow("environmentComposition", "Состав среды, %", Model.Value?.environmentComposition);
                            ValueRow("plateServiceParam2", "Угол крена, °", Model.Value?.plateServiceParam2);
                            ValueRow("plateServiceParam3", "Угол дифферента, °", Model.Value?.plateServiceParam3);
                            ValueRow("cs1", "Измеренная емкость платы, Пф", Model.Value?.cs1);
                            ValueRow("crc", "Контрольная сумма", Model.Value?.crc);
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/signalr/signalr.min.js"></script>
<script>
    new DatePicker('exportDateStart', {
        allowTime: true
    });
    new DatePicker('exportDateEnd', {
        allowTime: true
    });

    @if (listenSensors.Any())
    {
        <text>
            const listenSensors = @Html.Raw(JsonSerializer.Serialize(listenSensors));
            const connection = new signalR.HubConnectionBuilder().withUrl('/broadcast/sensorvalue').build();

            connection.on('sensorupdate', tankSensorUpdate);
            connection.start();
        </text>
    }
</script>
@Html.ViewModelWindow()