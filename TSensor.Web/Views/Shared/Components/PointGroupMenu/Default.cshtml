@using TSensor.Web.Models.Entity;
@using TSensor.Web.Models.Services
@using TSensor.Web.ViewComponents;
@using TSensor.Web.ViewModels.Point;
@model IEnumerable<PointGroup>
@{
    Layout = null;

    var comparer = new AlphanumComparer();
}
@if (Model?.Any() == true)
{
    if (Model.Any(p => p.PointGroupGuid == PointGroupMenu.NotAssignedSensorGroupGuid))
    {
        <li>@Html.ActionLink("Датчики без привязки", "NotAssigned", "Dashboard")</li>
    }
    <li class="apply-button hidden"><a href="javascript:void(0)">ПРИМЕНИТЬ</a></li>
    <li><a>@Html.MenuElementCheckbox(PointGroup.RootGuid, null)Все объекты</a></li>
    foreach (var group in Model.Where(p => p.PointGroupGuid != PointGroupMenu.NotAssignedSensorGroupGuid)
        .OrderBy(p => string.IsNullOrEmpty(p.Name)).ThenBy(p => p.Name, comparer))
    {
        if (string.IsNullOrEmpty(group.Name))
        {
            foreach (var point in group.PointList.OrderBy(p => p.Name, comparer))
            {
                @Html.Partial("MenuElementPoint", new MenuElementViewModel { Point = point });
            }
        }
        else
        {
            @if (group.PointList.Any())
            {
                <li class="treeview">
                    <a href="javascript:void(0)">
                        @Html.MenuElementCheckbox(group.PointGroupGuid, PointGroup.RootGuid)@group.Name
                        <span class="pull-right-container"><i class="fa fa-angle-left pull-right"></i></span>
                    </a>
                    <ul class="treeview-menu">
                        @foreach (var point in group.PointList.OrderBy(p => p.Name, comparer))
                        {
                            @Html.Partial("MenuElementPoint", new MenuElementViewModel { Point = point, GroupGuid = group.PointGroupGuid });
                        }
                    </ul>
                </li>
            }
            else
            {
                <li><a>@Html.MenuElementCheckbox(group.PointGroupGuid, PointGroup.RootGuid)@group.Name</a></li>
            }
        }
    }
    @using (Html.BeginForm("Index", "Dashboard", FormMethod.Post, new { @class = "hidden", autocomplete = "off", id = "goto-form" }))
    {
    }
}
<script>
    var MainMenu = function () {
        var that = this;

        that.checkboxes = $('.menu-checkbox');
        that.ignoreCallbackGuid = null;

        that.applyButton = $('.apply-button');
        that.showApplyButton = function () {
            that.applyButton.removeClass('hidden');
        }
        that.goto = function () {
            var gotoForm = $('#goto-form');

            $('.menu-checkbox:checked').each(function (i, e) {
                gotoForm.append('<input type="hidden" name="guidList[]" value="' + $(e).data('guid') + '" />');
            });

            gotoForm.submit();
        }

        that.checkParent = function (state, guid, parent) {
            var el = $('input[data-guid="' + parent + '"]');
            if (el.length !== 0) {
                if (state === 'checked' && !el.is(':checked') &&
                    $('input[data-parent="' + parent + '"][data-guid!="' + guid + '"]:not(:checked)').length === 0) {
                    el.iCheck('check');
                }
                if (state === 'unchecked' && el.is(':checked')) {
                    that.ignoreCallbackGuid = parent;
                    el.iCheck('uncheck');
                }
            }
        }

        that.eventCallback = {
            checked: function () {
                var el = $(this);
                var parent = el.data('parent');
                var guid = el.data('guid');

                $('input:not(:checked)[data-parent="' + guid + '"]').iCheck('check');
                checkParent('checked', guid, parent);

                that.showApplyButton();
            },
            unchecked: function () {
                var el = $(this);
                var parent = el.data('parent');
                var guid = el.data('guid');

                if (that.ignoreCallbackGuid === guid) {
                    that.ignoreCallbackGuid = null;
                } else {
                    $('input:checked[data-parent="' + guid + '"]').iCheck('uncheck');
                }

                checkParent('unchecked', guid, parent);

                that.showApplyButton();
            }
        }

        that.init = function () {
            that.checkboxes.on('ifChecked', that.eventCallback.checked);
            that.checkboxes.on('ifUnchecked', that.eventCallback.unchecked);

            that.checkboxes.iCheck({
                checkboxClass: 'icheckbox_square-blue'
            });

            that.applyButton.click(that.goto);
        };

        that.init();

        return that;
    }();
</script>